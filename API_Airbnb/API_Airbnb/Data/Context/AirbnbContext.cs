// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using API_Airbnb.Data.Models;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;

namespace API_Airbnb.Data.Context
{
    public partial class AirbnbContext : IdentityDbContext<ArUsers>
    {
        public AirbnbContext()
        {
        }

        public AirbnbContext(DbContextOptions<AirbnbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ArBookings> ArBookings { get; set; }
        public virtual DbSet<ArCategories> ArCategories { get; set; }
        public virtual DbSet<ArCities> ArCities { get; set; }
        public virtual DbSet<ArCountries> ArCountries { get; set; }
        public virtual DbSet<ArCurrencies> ArCurrencies { get; set; }
        public virtual DbSet<ArDisputes> ArDisputes { get; set; }
        public virtual DbSet<ArPromoCodes> ArPromoCodes { get; set; }
        public virtual DbSet<ArProperties> ArProperties { get; set; }
        public virtual DbSet<ArPropertyImages> ArPropertyImages { get; set; }
        public virtual DbSet<ArPropertyReviews> ArPropertyReviews { get; set; }
        public virtual DbSet<ArPropertyType> ArPropertyType { get; set; }
        public virtual DbSet<ArRoomType> ArRoomType { get; set; }
        public virtual DbSet<ArStates> ArStates { get; set; }
        public virtual DbSet<ArSubcategories> ArSubcategories { get; set; }
        public virtual DbSet<ArTransactions> ArTransactions { get; set; }
       // public virtual DbSet<ArUsers> ArUsers { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ArBookings>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Property)
                    .WithMany(p => p.ArBookings)
                    .HasForeignKey(d => d.PropertyId)
                    .HasConstraintName("FK_ar_bookings_ar_properties1");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ArBookings)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_ar_bookings_ar_users");
            });

            modelBuilder.Entity<ArCategories>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<ArCities>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.ArCities)
                    .HasForeignKey(d => d.CountryId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ar_Cities_ar_countries");
            });

            modelBuilder.Entity<ArCountries>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<ArCurrencies>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<ArDisputes>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Booking)
                    .WithMany(p => p.ArDisputes)
                    .HasForeignKey(d => d.BookingId)
                    .HasConstraintName("FK__ar_disput__booki__5812160E");

                entity.HasOne(d => d.Property)
                    .WithMany(p => p.ArDisputes)
                    .HasForeignKey(d => d.PropertyId)
                    .HasConstraintName("FK__ar_disput__prope__59063A47");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ArDisputes)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK__ar_disput__user___17F790F9");
            });

            modelBuilder.Entity<ArPromoCodes>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<ArProperties>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.ArProperties)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("FK_ar_properties_ar_categories");

                entity.HasOne(d => d.City)
                    .WithMany(p => p.ArProperties)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_ar_properties_ar_Cities");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.ArProperties)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_ar_properties_ar_countries");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.ArProperties)
                    .HasForeignKey(d => d.CurrencyId)
                    .HasConstraintName("FK_ar_properties_ar_currencies");

                entity.HasOne(d => d.PropertyType)
                    .WithMany(p => p.ArProperties)
                    .HasForeignKey(d => d.PropertyTypeId)
                    .HasConstraintName("FK_ar_properties_ar_property_type");

                entity.HasOne(d => d.RoomType)
                    .WithMany(p => p.ArProperties)
                    .HasForeignKey(d => d.RoomTypeId)
                    .HasConstraintName("FK_ar_properties_ar_room_type");

                entity.HasOne(d => d.State)
                    .WithMany(p => p.ArProperties)
                    .HasForeignKey(d => d.StateId)
                    .HasConstraintName("FK_ar_properties_ar_states");

                entity.HasOne(d => d.Subcategory)
                    .WithMany(p => p.ArProperties)
                    .HasForeignKey(d => d.SubcategoryId)
                    .HasConstraintName("FK_ar_properties_ar_subcategories");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ArProperties)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_ar_properties_ar_users");
            });

            modelBuilder.Entity<ArPropertyImages>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.AddedByUserNavigation)
                    .WithMany(p => p.ArPropertyImages)
                    .HasForeignKey(d => d.AddedByUser)
                    .HasConstraintName("FK_ar_property_images_ar_users");

                entity.HasOne(d => d.Property)
                    .WithMany(p => p.ArPropertyImages)
                    .HasForeignKey(d => d.PropertyId)
                    .HasConstraintName("FK_ar_property_images_ar_properties");
            });

            modelBuilder.Entity<ArPropertyReviews>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Booking)
                    .WithMany(p => p.ArPropertyReviews)
                    .HasForeignKey(d => d.BookingId)
                    .HasConstraintName("FK_ar_property_reviews_ar_bookings");

                entity.HasOne(d => d.Property)
                    .WithMany(p => p.ArPropertyReviews)
                    .HasForeignKey(d => d.PropertyId)
                    .HasConstraintName("FK_ar_property_reviews_ar_properties");

                entity.HasOne(d => d.ReviewByUserNavigation)
                    .WithMany(p => p.ArPropertyReviews)
                    .HasForeignKey(d => d.ReviewByUser)
                    .HasConstraintName("FK_ar_property_reviews_ar_users");
            });

            modelBuilder.Entity<ArPropertyType>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<ArRoomType>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<ArStates>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.City)
                    .WithMany(p => p.ArStates)
                    .HasForeignKey(d => d.CityId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ar_states_ar_Cities");
            });

            modelBuilder.Entity<ArSubcategories>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.ArSubcategories)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("FK__ar_subcat__categ__2739D489");
            });

            modelBuilder.Entity<ArTransactions>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.ArTransactions)
                    .HasForeignKey(d => d.CurrencyId)
                    .HasConstraintName("FK__ar_transa__curre__282DF8C2");

                entity.HasOne(d => d.PromoCode)
                    .WithMany(p => p.ArTransactions)
                    .HasForeignKey(d => d.PromoCodeId)
                    .HasConstraintName("FK__ar_transa__promo__29221CFB");

                entity.HasOne(d => d.Property)
                    .WithMany(p => p.ArTransactions)
                    .HasForeignKey(d => d.PropertyId)
                    .HasConstraintName("FK__ar_transa__prope__5FB337D6");

                entity.HasOne(d => d.Reciever)
                    .WithMany(p => p.ArTransactions)
                    .HasForeignKey(d => d.RecieverId)
                    .HasConstraintName("FK__ar_transa__recie__2B0A656D");
            });

           // OnModelCreatingPartial(modelBuilder);
           base.OnModelCreating(modelBuilder);
            modelBuilder.Entity<ArUsers>().ToTable("ar_users");
        }

        //partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}