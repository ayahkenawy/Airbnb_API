// <auto-generated />
using System;
using API_Airbnb.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API_Airbnb.Migrations
{
    [DbContext(typeof(AirbnbContext))]
    [Migration("20220806150811_Editlength")]
    partial class Editlength
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("API_Airbnb.Data.Models.ArBookings", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal?>("AmountPaid")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("amount_paid");

                    b.Property<DateTime?>("BookingDate")
                        .HasColumnType("datetime")
                        .HasColumnName("booking_date");

                    b.Property<DateTime?>("CancelDate")
                        .HasColumnType("datetime")
                        .HasColumnName("cancel_date");

                    b.Property<DateTime?>("CheckInDate")
                        .HasColumnType("datetime")
                        .HasColumnName("check_in_date");

                    b.Property<DateTime?>("CheckOutDate")
                        .HasColumnType("datetime")
                        .HasColumnName("check_out_date");

                    b.Property<byte?>("ChildrenCount")
                        .HasColumnType("tinyint")
                        .HasColumnName("children_count");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created");

                    b.Property<byte?>("GuestCount")
                        .HasColumnType("tinyint")
                        .HasColumnName("guests_count");

                    b.Property<bool?>("IsRefund")
                        .HasColumnType("bit")
                        .HasColumnName("is_refund");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime")
                        .HasColumnName("modified");

                    b.Property<decimal?>("PricePerDay")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price_per_day");

                    b.Property<decimal?>("PricePerStay")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price_per_stay");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int")
                        .HasColumnName("property_id");

                    b.Property<decimal?>("RefundPaid")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("refund_paid");

                    b.Property<byte?>("RoomsCount")
                        .HasColumnType("tinyint")
                        .HasColumnName("rooms_count");

                    b.Property<decimal?>("SiteFees")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("site_fees");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<decimal?>("TaxPaid")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("tax_paid");

                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserId");

                    b.ToTable("ar_bookings");
                });

            modelBuilder.Entity("API_Airbnb.Data.Models.ArCategories", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime")
                        .HasColumnName("modified");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("ar_categories");
                });

            modelBuilder.Entity("API_Airbnb.Data.Models.ArCities", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("country_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("ar_Cities");
                });

            modelBuilder.Entity("API_Airbnb.Data.Models.ArCountries", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("ar_countries");
                });

            modelBuilder.Entity("API_Airbnb.Data.Models.ArCurrencies", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created");

                    b.Property<string>("IconImage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("icon_image");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime")
                        .HasColumnName("modified");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("ar_currencies");
                });

            modelBuilder.Entity("API_Airbnb.Data.Models.ArDisputes", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("booking_id");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime")
                        .HasColumnName("modified");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int")
                        .HasColumnName("property_id");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserId");

                    b.ToTable("ar_disputes");
                });

            modelBuilder.Entity("API_Airbnb.Data.Models.ArPromoCodes", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("discount");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime")
                        .HasColumnName("modified");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("ar_promo_codes");
                });

            modelBuilder.Entity("API_Airbnb.Data.Models.ArProperties", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<byte?>("AccomodatesCount")
                        .HasColumnType("tinyint")
                        .HasColumnName("accomodates_count");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<bool?>("AvailabilityType")
                        .HasColumnType("bit")
                        .HasColumnName("availability_type");

                    b.Property<byte?>("BathroomCount")
                        .HasColumnType("tinyint")
                        .HasColumnName("bathroom_count");

                    b.Property<byte?>("BedCount")
                        .HasColumnType("tinyint")
                        .HasColumnName("bed_count");

                    b.Property<byte?>("BedroomCount")
                        .HasColumnType("tinyint")
                        .HasColumnName("bedroom_count");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("country_id");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("currency_id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("latitude");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("longitude");

                    b.Property<string>("MinimumStay")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("minimum_stay");

                    b.Property<byte?>("MinimumStayType")
                        .HasColumnType("tinyint")
                        .HasColumnName("minimum_stay_type");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime")
                        .HasColumnName("modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.Property<byte?>("PriceType")
                        .HasColumnType("tinyint")
                        .HasColumnName("price_type");

                    b.Property<int?>("PropertyTypeId")
                        .HasColumnType("int")
                        .HasColumnName("property_type_id");

                    b.Property<bool?>("RefundType")
                        .HasColumnType("bit")
                        .HasColumnName("refund_type");

                    b.Property<int?>("RoomTypeId")
                        .HasColumnType("int")
                        .HasColumnName("room_type_id");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.Property<int?>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("state_id");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<int?>("SubcategoryId")
                        .HasColumnType("int")
                        .HasColumnName("subcategory_id");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PropertyTypeId");

                    b.HasIndex("RoomTypeId");

                    b.HasIndex("StateId");

                    b.HasIndex("SubcategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("ar_properties");
                });

            modelBuilder.Entity("API_Airbnb.Data.Models.ArPropertyImages", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("AddedByUser")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("added_by_user");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int")
                        .HasColumnName("property_id");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUser");

                    b.HasIndex("PropertyId");

                    b.ToTable("ar_property_images");
                });

            modelBuilder.Entity("API_Airbnb.Data.Models.ArPropertyReviews", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("booking_id");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime")
                        .HasColumnName("modified");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int")
                        .HasColumnName("property_id");

                    b.Property<byte?>("Rating")
                        .HasColumnType("tinyint")
                        .HasColumnName("rating");

                    b.Property<string>("ReviewByUser")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("review_by_user");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("ReviewByUser");

                    b.ToTable("ar_property_reviews");
                });

            modelBuilder.Entity("API_Airbnb.Data.Models.ArPropertyType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created");

                    b.Property<string>("IconImage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("icon_image");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime")
                        .HasColumnName("modified");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("ar_property_type");
                });

            modelBuilder.Entity("API_Airbnb.Data.Models.ArRoomType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created");

                    b.Property<string>("IconImage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("icon_image");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime")
                        .HasColumnName("modified");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("ar_room_type");
                });

            modelBuilder.Entity("API_Airbnb.Data.Models.ArStates", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("ar_states");
                });

            modelBuilder.Entity("API_Airbnb.Data.Models.ArSubcategories", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime")
                        .HasColumnName("modified");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("ar_subcategories");
                });

            modelBuilder.Entity("API_Airbnb.Data.Models.ArTransactions", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(10,0)")
                        .HasColumnName("amount");

                    b.Property<int?>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("booking_id");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("currency_id");

                    b.Property<decimal?>("DiscoundAmt")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("discound_amt");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime")
                        .HasColumnName("modified");

                    b.Property<int?>("PromoCodeId")
                        .HasColumnType("int")
                        .HasColumnName("promo_code_id");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int")
                        .HasColumnName("property_id");

                    b.Property<string>("RecieverId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("reciever_id");

                    b.Property<decimal?>("SiteFrees")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("site_frees");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<decimal?>("TransferOn")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("transfer_on");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PromoCodeId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("RecieverId");

                    b.ToTable("ar_transactions");
                });

            modelBuilder.Entity("API_Airbnb.Data.Models.ArUsers", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("about");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FacebookId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("facebook_id");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime")
                        .HasColumnName("modified");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool?>("RecieveCoupon")
                        .HasColumnType("bit")
                        .HasColumnName("recieve_coupon");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("TwitterId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("twitter_id");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool?>("UserType")
                        .HasColumnType("bit")
                        .HasColumnName("user_type");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("ar_users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("API_Airbnb.Data.Models.ArBookings", b =>
                {
                    b.HasOne("API_Airbnb.Data.Models.ArProperties", "Property")
                        .WithMany("ArBookings")
                        .HasForeignKey("PropertyId")
                        .HasConstraintName("FK_ar_bookings_ar_properties1");

                    b.HasOne("API_Airbnb.Data.Models.ArUsers", "User")
                        .WithMany("ArBookings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_ar_bookings_ar_users");

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API_Airbnb.Data.Models.ArCities", b =>
                {
                    b.HasOne("API_Airbnb.Data.Models.ArCountries", "Country")
                        .WithMany("ArCities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_ar_Cities_ar_countries");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("API_Airbnb.Data.Models.ArDisputes", b =>
                {
                    b.HasOne("API_Airbnb.Data.Models.ArBookings", "Booking")
                        .WithMany("ArDisputes")
                        .HasForeignKey("BookingId")
                        .HasConstraintName("FK__ar_disput__booki__5812160E");

                    b.HasOne("API_Airbnb.Data.Models.ArProperties", "Property")
                        .WithMany("ArDisputes")
                        .HasForeignKey("PropertyId")
                        .HasConstraintName("FK__ar_disput__prope__59063A47");

                    b.HasOne("API_Airbnb.Data.Models.ArUsers", "User")
                        .WithMany("ArDisputes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__ar_disput__user___17F790F9");

                    b.Navigation("Booking");

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API_Airbnb.Data.Models.ArProperties", b =>
                {
                    b.HasOne("API_Airbnb.Data.Models.ArCategories", "Category")
                        .WithMany("ArProperties")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_ar_properties_ar_categories");

                    b.HasOne("API_Airbnb.Data.Models.ArCities", "City")
                        .WithMany("ArProperties")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_ar_properties_ar_Cities");

                    b.HasOne("API_Airbnb.Data.Models.ArCountries", "Country")
                        .WithMany("ArProperties")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_ar_properties_ar_countries");

                    b.HasOne("API_Airbnb.Data.Models.ArCurrencies", "Currency")
                        .WithMany("ArProperties")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_ar_properties_ar_currencies");

                    b.HasOne("API_Airbnb.Data.Models.ArPropertyType", "PropertyType")
                        .WithMany("ArProperties")
                        .HasForeignKey("PropertyTypeId")
                        .HasConstraintName("FK_ar_properties_ar_property_type");

                    b.HasOne("API_Airbnb.Data.Models.ArRoomType", "RoomType")
                        .WithMany("ArProperties")
                        .HasForeignKey("RoomTypeId")
                        .HasConstraintName("FK_ar_properties_ar_room_type");

                    b.HasOne("API_Airbnb.Data.Models.ArStates", "State")
                        .WithMany("ArProperties")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_ar_properties_ar_states");

                    b.HasOne("API_Airbnb.Data.Models.ArSubcategories", "Subcategory")
                        .WithMany("ArProperties")
                        .HasForeignKey("SubcategoryId")
                        .HasConstraintName("FK_ar_properties_ar_subcategories");

                    b.HasOne("API_Airbnb.Data.Models.ArUsers", "User")
                        .WithMany("ArProperties")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_ar_properties_ar_users");

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Currency");

                    b.Navigation("PropertyType");

                    b.Navigation("RoomType");

                    b.Navigation("State");

                    b.Navigation("Subcategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API_Airbnb.Data.Models.ArPropertyImages", b =>
                {
                    b.HasOne("API_Airbnb.Data.Models.ArUsers", "AddedByUserNavigation")
                        .WithMany("ArPropertyImages")
                        .HasForeignKey("AddedByUser")
                        .HasConstraintName("FK_ar_property_images_ar_users");

                    b.HasOne("API_Airbnb.Data.Models.ArProperties", "Property")
                        .WithMany("ArPropertyImages")
                        .HasForeignKey("PropertyId")
                        .HasConstraintName("FK_ar_property_images_ar_properties");

                    b.Navigation("AddedByUserNavigation");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("API_Airbnb.Data.Models.ArPropertyReviews", b =>
                {
                    b.HasOne("API_Airbnb.Data.Models.ArBookings", "Booking")
                        .WithMany("ArPropertyReviews")
                        .HasForeignKey("BookingId")
                        .HasConstraintName("FK_ar_property_reviews_ar_bookings");

                    b.HasOne("API_Airbnb.Data.Models.ArProperties", "Property")
                        .WithMany("ArPropertyReviews")
                        .HasForeignKey("PropertyId")
                        .HasConstraintName("FK_ar_property_reviews_ar_properties");

                    b.HasOne("API_Airbnb.Data.Models.ArUsers", "ReviewByUserNavigation")
                        .WithMany("ArPropertyReviews")
                        .HasForeignKey("ReviewByUser")
                        .HasConstraintName("FK_ar_property_reviews_ar_users");

                    b.Navigation("Booking");

                    b.Navigation("Property");

                    b.Navigation("ReviewByUserNavigation");
                });

            modelBuilder.Entity("API_Airbnb.Data.Models.ArStates", b =>
                {
                    b.HasOne("API_Airbnb.Data.Models.ArCities", "City")
                        .WithMany("ArStates")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_ar_states_ar_Cities");

                    b.Navigation("City");
                });

            modelBuilder.Entity("API_Airbnb.Data.Models.ArSubcategories", b =>
                {
                    b.HasOne("API_Airbnb.Data.Models.ArCategories", "Category")
                        .WithMany("ArSubcategories")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__ar_subcat__categ__2739D489");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("API_Airbnb.Data.Models.ArTransactions", b =>
                {
                    b.HasOne("API_Airbnb.Data.Models.ArCurrencies", "Currency")
                        .WithMany("ArTransactions")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK__ar_transa__curre__282DF8C2");

                    b.HasOne("API_Airbnb.Data.Models.ArPromoCodes", "PromoCode")
                        .WithMany("ArTransactions")
                        .HasForeignKey("PromoCodeId")
                        .HasConstraintName("FK__ar_transa__promo__29221CFB");

                    b.HasOne("API_Airbnb.Data.Models.ArProperties", "Property")
                        .WithMany("ArTransactions")
                        .HasForeignKey("PropertyId")
                        .HasConstraintName("FK__ar_transa__prope__5FB337D6");

                    b.HasOne("API_Airbnb.Data.Models.ArUsers", "Reciever")
                        .WithMany("ArTransactions")
                        .HasForeignKey("RecieverId")
                        .HasConstraintName("FK__ar_transa__recie__2B0A656D");

                    b.Navigation("Currency");

                    b.Navigation("PromoCode");

                    b.Navigation("Property");

                    b.Navigation("Reciever");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("API_Airbnb.Data.Models.ArUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("API_Airbnb.Data.Models.ArUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Airbnb.Data.Models.ArUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("API_Airbnb.Data.Models.ArUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API_Airbnb.Data.Models.ArBookings", b =>
                {
                    b.Navigation("ArDisputes");

                    b.Navigation("ArPropertyReviews");
                });

            modelBuilder.Entity("API_Airbnb.Data.Models.ArCategories", b =>
                {
                    b.Navigation("ArProperties");

                    b.Navigation("ArSubcategories");
                });

            modelBuilder.Entity("API_Airbnb.Data.Models.ArCities", b =>
                {
                    b.Navigation("ArProperties");

                    b.Navigation("ArStates");
                });

            modelBuilder.Entity("API_Airbnb.Data.Models.ArCountries", b =>
                {
                    b.Navigation("ArCities");

                    b.Navigation("ArProperties");
                });

            modelBuilder.Entity("API_Airbnb.Data.Models.ArCurrencies", b =>
                {
                    b.Navigation("ArProperties");

                    b.Navigation("ArTransactions");
                });

            modelBuilder.Entity("API_Airbnb.Data.Models.ArPromoCodes", b =>
                {
                    b.Navigation("ArTransactions");
                });

            modelBuilder.Entity("API_Airbnb.Data.Models.ArProperties", b =>
                {
                    b.Navigation("ArBookings");

                    b.Navigation("ArDisputes");

                    b.Navigation("ArPropertyImages");

                    b.Navigation("ArPropertyReviews");

                    b.Navigation("ArTransactions");
                });

            modelBuilder.Entity("API_Airbnb.Data.Models.ArPropertyType", b =>
                {
                    b.Navigation("ArProperties");
                });

            modelBuilder.Entity("API_Airbnb.Data.Models.ArRoomType", b =>
                {
                    b.Navigation("ArProperties");
                });

            modelBuilder.Entity("API_Airbnb.Data.Models.ArStates", b =>
                {
                    b.Navigation("ArProperties");
                });

            modelBuilder.Entity("API_Airbnb.Data.Models.ArSubcategories", b =>
                {
                    b.Navigation("ArProperties");
                });

            modelBuilder.Entity("API_Airbnb.Data.Models.ArUsers", b =>
                {
                    b.Navigation("ArBookings");

                    b.Navigation("ArDisputes");

                    b.Navigation("ArProperties");

                    b.Navigation("ArPropertyImages");

                    b.Navigation("ArPropertyReviews");

                    b.Navigation("ArTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
